-- KEY SYSTEM V2 UI LIBRARY:
-- UI by mr.xrer | Code by mstudio45

local KeySystemUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/MaGiXxScripter0/keysystemv2api/master/ui/xrer_mstudio45.lua"))()
KeySystemUI.New({
    ApplicationName = "NSHUB", -- Your Key System Application Name
    Name = "NS HUB KEY SYSTEM", -- Your Script name
    Info = "Tap Get Key and Copy it or Buy Premium", -- Info text in the GUI, keep empty for default text.
    DiscordInvite = "https://discord.gg/ZkptAdmFDg" -- Optional.
})
repeat task.wait() until KeySystemUI.Finished() or KeySystemUI.Closed
if KeySystemUI.Finished() and KeySystemUI.Closed == false then
    print("Key verified, can load script")
    local ScreenGui = Instance.new("ScreenGui")
local ImageLabel = Instance.new("ImageLabel")
local TextButton = Instance.new("TextButton")
local UITextSizeConstraint = Instance.new("UITextSizeConstraint")
local UICorner = Instance.new("UICorner")

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

ImageLabel.Parent = ScreenGui
ImageLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
ImageLabel.BorderSizePixel = 0
ImageLabel.Position = UDim2.new(0.05, 0, 0.05, 0)  -- Adjusted position
ImageLabel.Scale = UDim2.new(0.15, 0, 0.15, 0)  -- Adjust size for mobile (optional)
ImageLabel.Image = "rbxassetid://3570695787"
ImageLabel.ImageColor3 = Color3.fromRGB(60, 60, 60)
ImageLabel.ScaleType = Enum.ScaleType.Slice

TextButton.Parent = ImageLabel
TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton.BackgroundTransparency = 1
TextButton.Scale = UDim2.new(1, 0, 1, 0)  -- Button resizes with ImageLabel
TextButton.Font = Enum.Font.Cartoon
TextButton.Text = "NS"
TextButton.TextColor3 = Color3.fromRGB(500, 500, 500)
TextButton.TextScaled = true
-- Text size adjusts with UITextSizeConstraint
TextButton.TextWrapped = true

UITextSizeConstraint.Parent = TextButton
UITextSizeConstraint.MaxTextSize = 50

-- Apply UICorner to ImageLabel with a corner radius of 0.8
UICorner.CornerRadius = UDim.new(0, 11)
UICorner.Parent = ImageLabel

TextButton.InputBegan:Connect(function()
  game:GetService("VirtualInputManager"):SendKeyEvent(true, "K", false, game)
end)
    
    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
    
    local Window = Fluent:CreateWindow({
        Title = "Anime Islands | NS HUB",
        SubTitle = "",
        TabWidth = 120,
        Size = UDim2.fromOffset(530, 350),
        Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
        Theme = "Amethyst",
        MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
    })
    
    --Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
    local Tabs = {
        Main = Window:AddTab({ Title = "Credits/Info", Icon = "scroll" }),
        Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
    }
    
    local Options = Fluent.Options
    
    do
        Fluent:Notify({
            Title = "Notification",
            Content = "This is a notification",
            SubContent = "SubContent", -- Optional
            Duration = 5 -- Set to nil to make the notification not disappear
        })
    
    Tabs.Main:AddParagraph({
        Title = "Script is Working!",
        Content = ""
    })
    
    Tabs.Main:AddParagraph({
        Title = "Supported Devices",
        Content = "- Mobile\n- PC\n- Emulator"
    })
    
    Tabs.Main:AddParagraph({
        Title = "Credits to : Nameless Scripts\nYoutube: Nameless Scripts\nDiscord: https://discord.gg/ZkptAdmFDg",
        Content = ""
    })
    
        local Tabs = {
            Main = Window:AddTab({ Title = "Auto Farm", Icon = "swords" }),
        }
    
        local ToggleSection = Tabs.Main:AddSection("Farm Selection", {
            Description = "This section contains toggle options.",
        })
    
        local isToggleOn = false
        local selectedEnemy = nil
        local enemiesList = {} -- Store the list of enemies
        local humanoid = game.Players.LocalPlayer.Character.Humanoid -- Reference to the player's humanoid
        local RunService = game:GetService("RunService")
        
        -- Dropdown creation block
        local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Select an Enemy",
        Description = "Select An Enemy to Farm or Farm Random Enemies Below",
        Values = enemiesList,
        Multi = false,
        Default = 1,
        })
        
        Dropdown:OnChanged(function(Value)
        selectedEnemy = Value
        print("Dropdown changed:", selectedEnemy)
        end)
        
        -- Toggle creation block
        local Toggle = Tabs.Main:AddToggle("MyToggle", { Title = "Enable Farm Selected", Default = false })
        
        -- Function to teleport to the selected enemy
        local function teleportToSelectedEnemy(enemyName)
        if isToggleOn then
            local enemy = game.Workspace:FindFirstChild("Client"):FindFirstChild("Mobs"):FindFirstChild(enemyName) -- Look for enemy in World Mobs/Mobs
            if enemy and not enemy:IsA("Player") then -- Check if enemy is not a player character
                local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        
                 -- Calculate offset and rotation
                 local offset = Vector3.new(0, 0, -6) -- Behind the enemy
                 local backwardRotation = CFrame.Angles(0, math.rad(180), 0) -- Facing backward
         
                 -- Teleport behind the selected enemy with backward facing orientation
                 humanoidRootPart.CFrame = CFrame.new(enemy.HumanoidRootPart.Position + offset) * backwardRotation  
            else
            end
        else
    
        end
        end
        
        -- Function to handle actions based on toggle state
        local function HandleToggleAction()
        while true do
            if isToggleOn and selectedEnemy ~= "" then
                -- Teleport to the selected enemy
                teleportToSelectedEnemy(selectedEnemy)
            end
            
            RunService.Heartbeat:Wait() -- Wait for the next frame
        end
        end
        
        Toggle:OnChanged(function(value)
        isToggleOn = value
        
        if isToggleOn then
            -- Start the toggle action in a new thread to not block the UI
            spawn(HandleToggleAction)
        else
            -- Return to normal position when toggle is turned off
            teleportToSelectedEnemy(selectedEnemy)
        end
        end)
        
        -- Refresh button to update the enemies list
        Tabs.Main:AddButton({
        Title = "Refresh Enemies",
        Callback = function()
            enemiesList = {} -- Clear the current list of enemies
            
            -- Update enemiesList with the names of enemies in World Mobs/Mobs excluding players
            for _, enemy in ipairs(game.Workspace["Client"]["Mobs"]:GetChildren()) do
                if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") and not enemy:IsA("Player") then
                    table.insert(enemiesList, enemy.Name)
                end
            end
            
            -- Update dropdown values with the new enemies list
            Dropdown:SetValues(enemiesList)
            
        end
        })
        
        -- Initial setup
        Dropdown:SetValue("") -- Set initial value to an empty string
    
        local toggleValue = false
        local teleporting = false
        local teleportThread = nil
        
        local function findNearestEnemy()
            local minDistance = math.huge
            local nearestEnemy = nil
            local myPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
        
            for _, enemy in pairs(game.Workspace.Client.Mobs:GetChildren()) do
                if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
                    local distance = (enemy.HumanoidRootPart.Position - myPosition).magnitude
                    if distance < minDistance then
                        minDistance = distance
                        nearestEnemy = enemy
                    end
                end
            end
        
            return nearestEnemy
        end
        
        local function teleportToEnemy(enemy)
            if enemy and not enemy:IsA("Player") then
                local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        
                -- Calculate offset and rotation
                local offset = Vector3.new(0, 0, -6) -- Behind the enemy
                local backwardRotation = CFrame.Angles(0, math.rad(180), 0) -- Facing backward
        
                -- Teleport behind the selected enemy with backward facing orientation
                humanoidRootPart.CFrame = CFrame.new(enemy.HumanoidRootPart.Position + offset) * backwardRotation
        
            end
        end
        
        local function onHeartbeat()
            if toggleValue and teleporting then
                local nearestEnemy = findNearestEnemy()
                teleportToEnemy(nearestEnemy)
            end
        end
        
        local Toggle = Tabs.Main:AddToggle("MyToggle", {
            Title = "Farm Random Enemies",
            Default = false,
            Description = "This Only Farms Random Enemies.",
        })
    
        local function checkToggle()
            toggleValue = Toggle.Value
            if toggleValue then
                teleporting = true
                game:GetService("RunService").Heartbeat:Connect(onHeartbeat)
            else
                teleporting = false
                game:GetService("RunService"):UnbindFromRenderStep("TeleportationStep")
            end
        end
        
        Toggle:OnChanged(checkToggle)
        checkToggle()
    
        local ToggleSection = Tabs.Main:AddSection("Utilities", {
            Description = "This section contains toggle options.",
        })
    
        local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Collect", Default = false })
        local CollectionFolderName = "Drops" -- Change this to the name of your Drops folder
        
        local function CollectModels(folder)
            local collectedModels = {}
        
            for _, object in ipairs(folder:GetChildren()) do
                if object:IsA("Model") then
                    table.insert(collectedModels, object)
                end
            end
        
            return collectedModels
        end
        
        local function CollectModelsInFolder(folderName)
            local parentFolder = game.Workspace:FindFirstChild(folderName)
            if not parentFolder or not parentFolder:IsA("Folder") then
                print("Folder '" .. folderName .. "' not found or is not a Folder.")
                return {}
            end
        
            return CollectModels(parentFolder)
        end
        
        local function MoveModelsToCharacter(models, character)
            for _, model in ipairs(models) do
                if character and character.PrimaryPart then
                    model:SetPrimaryPartCFrame(character.PrimaryPart.CFrame)
                    model.Parent = character
                end
            end
        end
        
        local function checkToggle()
            local Character = game.Players.LocalPlayer.Character
            while Toggle.Value and Character do
                local collectedModels = CollectModelsInFolder(CollectionFolderName)
                MoveModelsToCharacter(collectedModels, Character)
                wait()
                Character = game.Players.LocalPlayer.Character  -- Update the Character reference
            end
        end
        
        Toggle:OnChanged(checkToggle)
        checkToggle()
        
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Attack Faster", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Combat",
                [2] = {
                    [1] = "Attack"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    Tabs.Main:AddButton({
        Title = "Redeem All Codes",
        Callback = function()
            local args = {
                [1] = "Shop",
                [2] = {
                    [1] = "UseCode",
                    [2] = "1KLIKES"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
    
            local args = {
                [1] = "Shop",
                [2] = {
                    [1] = "UseCode",
                    [2] = "2KLIKES"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))  
            
            local args = {
                [1] = "Shop",
                [2] = {
                    [1] = "UseCode",
                    [2] = "BUGFIXES"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))  
    
            local args = {
                [1] = "Shop",
                [2] = {
                    [1] = "UseCode",
                    [2] = ""
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))  
    
            local args = {
                [1] = "Shop",
                [2] = {
                    [1] = "UseCode",
                    [2] = ""
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))  
    
            local args = {
                [1] = "Shop",
                [2] = {
                    [1] = "UseCode",
                    [2] = ""
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))  
        end
        })
    
        local Tabs = {
            Main = Window:AddTab({ Title = "Misc", Icon = "flame" }),
        }
    
        local toggleValue = false
    
        local Toggle = Tabs.Main:AddToggle("MyToggle", { Title = "Anti AFK", Default = false })
        
        local function checkToggle()
            toggleValue = Toggle.Value
            if toggleValue then
                print("Anti AFK enabled")
                spawn(function()
                    while toggleValue do
                        local Humanoid = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                        if Humanoid then
                            Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                        end
                        wait(900) -- Wait for 900 seconds (15 minutes)
                    end
                end)
            else
                print("Anti AFK disabled")
            end
        end
        
        Toggle:OnChanged(checkToggle)
        checkToggle()
        
    
        local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Rank Up", Default = false })
        local function checkToggle()
            while Toggle.Value do
                local args = {
                    [1] = "Rankup",
                    [2] = {
                        [1] = "Rankup"
                    }
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))            
                wait()
            end
        end
        
        Toggle:OnChanged(checkToggle)
        checkToggle()
    
        local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Evolved Aura", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Aura",
                [2] = {
                    [1] = "Evolve"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Equip Best Pet", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Inventory",
                [2] = {
                    [1] = "EquipBest",
                    [2] = "Pets"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait(10)
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Equip Best Sword", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Inventory",
                [2] = {
                    [1] = "EquipBest",
                    [2] = "Swords"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))           
            wait(10)
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Summon Hero", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "HeroSummon",
                [2] = {
                    [1] = "Spin"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait(5)
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Tabs = {
        Main = Window:AddTab({ Title = "Auto Upgrade", Icon = "chevrons-up" }),
    }
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "POWER UP", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Upgrade",
                [2] = {
                    [1] = "Upgrade",
                    [2] = "Power"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))  
            wait()      
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "GEM BOOST", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Upgrade",
                [2] = {
                    [1] = "Upgrade",
                    [2] = "Gems"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()      
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "SWORD DMG", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Upgrade",
                [2] = {
                    [1] = "Upgrade",
                    [2] = "Sword"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()      
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "PET EQUIPPED", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Upgrade",
                [2] = {
                    [1] = "Upgrade",
                    [2] = "PetsEquipped"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()      
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Tabs = {
        Main = Window:AddTab({ Title = "Auto Summon", Icon = "ghost" }),
    }
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x1(PIRATE ISLAND)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x1",
                    [3] = "Pirate Island",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x3(PIRATE ISLAND)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x3",
                    [3] = "Pirate Island",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x1(SHINOBI VILLAGE)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x1",
                    [3] = "Shinobi Village",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))       
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x3(SHINOBI VILLAGE)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x3",
                    [3] = "Shinobi Village",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))           
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x1(CURSED SCHOOL)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x1",
                    [3] = "Cursed School",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x3(CURSED SCHOOL)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x3",
                    [3] = "Cursed School",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x1(ALIEN PLANET)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x3",
                    [3] = "Alien Planet",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x3(ALIEN PLANET)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x3",
                    [3] = "Cursed School",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x1(SOLO CITY)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x3",
                    [3] = "Solo City",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Summon x3(SOLO CITY)", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "PetSummon",
                [2] = {
                    [1] = "Spin",
                    [2] = "x3",
                    [3] = "Solo City",
                    [4] = false,
                    [5] = {}
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Tabs = {
        Main = Window:AddTab({ Title = "Auto Merchant", Icon = "shopping-bag" }),
    }
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Pirate Island", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Market",
                [2] = {
                    [1] = "BuyItem",
                    [2] = "Pirate Island",
                    [3] = 1
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))             
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Pirate Island", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Market",
                [2] = {
                    [1] = "BuyItem",
                    [2] = "Shinobi Village",
                    [3] = 1
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))             
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Cursed Island", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Market",
                [2] = {
                    [1] = "BuyItem",
                    [2] = "Cursed School",
                    [3] = 1
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Alien Planet", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Market",
                [2] = {
                    [1] = "BuyItem",
                    [2] = "Alien Planet",
                    [3] = 1
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Solo City", Default = false })
    local function checkToggle()
        while Toggle.Value do
            local args = {
                [1] = "Market",
                [2] = {
                    [1] = "BuyItem",
                    [2] = "Solo City",
                    [3] = 1
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("MainRemote"):FireServer(unpack(args))        
            wait()
        end
    end
    
    Toggle:OnChanged(checkToggle)
    checkToggle()
    
    local Tabs = {
        Main = Window:AddTab({ Title = "Teleport", Icon = "map-pin" }),
        }
    
        Tabs.Main:AddButton({
            Title = "PIRATE ISLAND",
            Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(4895.1001, 23.0410004, -268.53299, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            end
            })
    
            Tabs.Main:AddButton({
                Title = "LOBBY ISLAND",
                Callback = function()
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(3006.71655, 364.893005, 1379.01697, 0.869161248, 0, 0.49452877, 0, 1, 0, -0.49452877, 0, 0.869161248)
                print("Confirmed the action.")
                end
                })
    
                Tabs.Main:AddButton({
                    Title = "SHINOBI ISLAND",
                    Callback = function()
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(4231.58984, -54.8860016, -1835.73303, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    print("Confirmed the action.")
                    end
                    })
    
                    Tabs.Main:AddButton({
                        Title = "MARKET ISLAND",
                        Callback = function()
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-82.8562927, 3.24499989, 887.728333, -0.0290840864, 0, -0.999576986, 0, 1, 0, 0.999576986, 0, -0.0290840864)
                        print("Confirmed the action.")
                        end
                        })
    
                        Tabs.Main:AddButton({
                            Title = "ALIEN PLANET ISLAND",
                            Callback = function()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(4047.70508, 179.332993, -5794.92822, -0.438621044, 0, 0.898672163, 0, 1, 0, -0.898672163, 0, -0.438621044)
                            print("Confirmed the action.")
                            end
                            })
    
                            Tabs.Main:AddButton({
                                Title = "SOLO ISLAND",
                                Callback = function()
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-161.395996, 99.4729996, -5637.91992, -0.591424465, 0, -0.806360483, 0, 1, 0, 0.806360483, 0, -0.591424465)
                                print("Confirmed the action.")
                                end
                                })
    
    local Tabs = {
        Main = Window:AddTab({ Title = "Other", Icon = "book" }),
    }
    
    
                local Keybind = Tabs.Main:AddKeybind("Keybind", {
                    Title = "KeyBind",
                    Mode = "Toggle", -- Always, Toggle, Hold
                    Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)
            
                    -- Occurs when the keybind is clicked, Value is `true`/`false`
                    Callback = function(Value)
                        print("Keybind clicked!", Value)
                    end,
            
                    -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
                    ChangedCallback = function(New)
                        print("Keybind changed!", New)
                    end
                })
            
                -- OnClick is only fired when you press the keybind and the mode is Toggle
                -- Otherwise, you will have to use Keybind:GetState()
                Keybind:OnClick(function()
                    print("Keybind clicked:", Keybind:GetState())
                end)
            
                Keybind:OnChanged(function()
                    print("Keybind changed:", Keybind.Value)
                end)
            
                task.spawn(function()
                    while true do
                        wait(1)
            
                        -- example for checking if a keybind is being pressed
                        local state = Keybind:GetState()
                        if state then
                            print("Keybind is being held down")
                        end
            
                        if Fluent.Unloaded then break end
                    end
                end)
            
                Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold
    
    
        local Input = Tabs.Main:AddInput("Input", {
            Title = "Input",
            Default = "Default",
            Placeholder = "Placeholder",
            Numeric = false, -- Only allows numbers
            Finished = false, -- Only calls callback when you press enter
            Callback = function(Value)
                print("Input changed:", Value)
            end
        })
    
        Input:OnChanged(function()
            print("Input updated:", Input.Value)
        end)
    end
    
    
    -- Addons:
    -- SaveManager (Allows you to have a configuration system)
    -- InterfaceManager (Allows you to have a interface managment system)
    
    -- Hand the library over to our managers
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)
    
    -- Ignore keys that are used by ThemeManager.
    -- (we dont want configs to save themes, do we?)
    SaveManager:IgnoreThemeSettings()
    
    -- You can add indexes of elements the save manager should ignore
    SaveManager:SetIgnoreIndexes({})
    
    -- use case for doing it this way:
    -- a script hub could have themes in a global folder
    -- and game configs in a separate folder per game
    InterfaceManager:SetFolder("FluentScriptHub")
    SaveManager:SetFolder("FluentScriptHub/specific-game")
    
    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)
    
    
    Window:SelectTab(1)
    
    Fluent:Notify({
        Title = "Fluent",
        Content = "The script has been loaded.",
        Duration = 8
    })
    
    -- You can use the SaveManager:LoadAutoloadConfig() to load a config
    -- which has been marked to be one that auto loads!
    SaveManager:LoadAutoloadConfig()
else
    print("Player closed the GUI.")
end
